import telebot
from telebot import types
import pymongo

from cogs.start import CommandHandler
from cogs.Withdraw import Withdraw
from cogs.admin import Admin
from cogs.add_balanse import Add_balanse
from cogs.help.help import Help
from cogs.Subcribes.Subcribes import Subcribes
from cogs.Approve.Approve import Approve
from cogs.Author.Author import Author
from cogs.Channel.Channel import Channel
from cogs.Channel_Setting.Message.Message import Message
from cogs.Channel_Setting.Stop.Stop import Stop
from cogs.Channel_Setting.strict_regime.strict import Strict
from cogs.WhileLIst.WhileList import WhileList


bot = telebot.TeleBot("6271631030:AAE50Ty4Aib5xvRlTCh20dXxo-p6E7PrTPg")
connect = pymongo.MongoClient("mongodb://localhost:27017")
db = connect["botname"]
Withdraw_collection = db["Withdraw"]
User_collection = db["User"]
Helps = db["Help_text"]

handler = CommandHandler(bot)
withdraw_instance = Withdraw(bot)
admins = Admin(bot)
add_balanse = Add_balanse(bot)
help = Help(bot)
Sub = Subcribes(bot)
approve = Approve(bot)
author = Author(bot)
channel = Channel(bot)
message_class = Message(bot)
stop = Stop(bot)
strict = Strict(bot)
W_list = WhileList(bot)


number = 1
number_balanse = 100
global User_id_chat
CommandHandler

def handle_cart_request(message):
    bot.register_next_step_handler(message.chat.id, process_car_amount)

def process_car_amount(message):
    marcup = types.InlineKeyboardMarkup()
    exit_balanse = types.InlineKeyboardButton(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥",  callback_data="exit_balanse_card")
    marcup.add(exit_balanse)
    bot.send_message(message.chat.id, f"<b>–®–∞–≥ {number + 1} / 2</b>\n\n–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, –∫—É–¥–∞ —Å–æ–≤–≤–µ—Ä—à–∏—Ç—Å—è –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:\n\n<b>–ü—Ä–∏–º–µ—Ä</b>: 5454 5454 5454 5454", reply_markup=marcup, parse_mode="HTML")
    bot.register_next_step_handler(message, text)
        
@bot.message_handler(func=lambda message: True, content_types=['new_chat_members'])
def new_member(message):
    if message_class.new_persone_status == "–í–∫–ª":
        try:
            chat_id = message.chat.id
            bot.send_message(chat_id, f"–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –≥—Ä—É–ø–∏, @{message.from_user.username}!")
        except:
            bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞, –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!")

def text(message):
    number_card = int(message.text)
    try:
        bot.send_message(message.chat.id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –í–∞—à–∏ —Å—Ä—É–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤—ã–≤–µ–¥–µ–Ω—ã –∏–∑ –±–æ—Ç–∞, –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–≤–ª–µ–Ω–∏–µ")

        add_Withdraw = {
            "Name": message.chat.first_name,
            "number_card": number_card,
            "balanse": amount,
            "id_channel": message.from_user.id,
        } 
        Withdraw_collection.insert_one(add_Withdraw)

    except ValueError:
        bot.send_message(message.chat.id, "‚ùå–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –∫–∞—Ä—Ç—ã\n<b>–ü—Ä–∏–º–µ—Ä</b> 5454 5454 5454 5454\n<b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞:</b>", parse_mode="HTML")
        handle_cart_request(message, process_car_amount)

def handle_withdraw_request(call):
    bot.register_next_step_handler(call.message, process_withdraw_amount)

def process_withdraw_amount(message):
    try:
        global amount
        amount = int(message.text)
        if amount <= number_balanse:
            process_car_amount(message)
        if amount > number_balanse:
            bot.send_message(message.chat.id, "‚ùå–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –º–µ–Ω—à–µ, —á–µ–º –í—ã –≤–≤–µ–ª–∏. <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞:</b>", parse_mode="HTML")
            bot.register_next_step_handler(message, process_withdraw_amount)
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞.", parse_mode="HTML")
        bot.register_next_step_handler(message, process_withdraw_amount)

    

@bot.message_handler(commands=['start'])
def handle_start(message):
    handler.handle_start(message)


@bot.message_handler(commands=["aprrove"])
def Aprrove(message):
    approve.App(message)


@bot.callback_query_handler(func=lambda call: True)
def handle_call(call):
    if call.data == "Balance":
        withdraw_instance.dalanse(call.message)
    elif call.data == "Withdraw":
        marcup = types.InlineKeyboardMarkup()
        exit_balanse = types.InlineKeyboardButton(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥",  callback_data="exit_balanse_money")
        marcup.row(exit_balanse)
        bot.send_message(call.message.chat.id, f"<b>–®–∞–≥ {number} / 2</b>\n\n–í–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö, –¥–ª—è –≤—ã–≤–æ–¥–∞\n<i>(–ò—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)</i>:", reply_markup=marcup, parse_mode="HTML")
        handle_withdraw_request(call)
    elif call.data == "exit_main_menu":
        handler.handle_start(call.message)
    if call.data == "Add_admin":
        bot.send_message(call.message.chat.id, "text")

    if call.data == "exit_balanse_money":
        handler.handle_start(call.message)
    if call.data == "exit_balanse_card":
        handler.handle_start(call.message)
    if call.data == "Withdeaw_admin":
        Complited_Markup = types.InlineKeyboardMarkup()
        Complited_Button = types.InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data = "Complited")
        Refuse_Button = types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data = "Refuse")
        Complited_Markup.row(Complited_Button, Refuse_Button)
        cursore = Withdraw_collection.find()
        for res in cursore:
            User_Name = res.get("Name")
            User_Number_card = res.get("number_card")
            User_balanse = res.get("balanse")
            User_id_chat = res.get("id_channel")
            bot.send_message(call.message.chat.id, f"‚ûñ<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥</b>‚ûñ\n<b>–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: </b>{User_balanse}\n<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã: </b>{User_Number_card}\n<b>–ü–æ–ª—å–∑–æ–∞—Ç–µ–ª—å: </b>{User_Name}", reply_markup=Complited_Markup, parse_mode="HTML")

    if call.data == "Admin_Help_Menu":
        cursore = Helps.find()

        for res in cursore:
            Name = res.get("Name")
            Help_Text = res.get("Text")
            User_Name = res.get("User_Name")
            bot.send_message(call.message.chat.id, f"‚ùó–ü–æ—Ç—Ä—ñ–±–Ω–∞ –Ω–æ–≤–∞ –ø–æ–º–æ—á—å‚ùó\n–í—ñ–¥: {Name}\n–¢–µ–∫—Å—Ç: {Help_Text}\n–ê–∫–∞—É–Ω—Ç: {User_Name}") 

    if call.data == "Complited":
        cursore = Withdraw_collection.find()
        for res in cursore:
            User_id_chat = res.get("id_channel")
            User_Name = res.get("Name")
            User_Number_card = res.get("number_card")
            User_balanse = res.get("balanse")
            id = User_id_chat
            bot.send_message(id, f"<b>‚úÖ–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–∏–≤–æ–¥ —Å—Ä–µ–¥—Ç–≤ –≤ —Ä–∞–∑–º–µ—Ä–µ</b>\n{User_balanse} –†—É–± —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –ø–æ –∫–∞—Ä—Ç–µ {User_Number_card}", parse_mode="HTML")
        
    if call.data == "Refuse":
        cursore = Withdraw_collection.find()
        for res in cursore:
            User_id_chat = res.get("id_channel")
            User_Name = res.get("Name")
            User_Number_card = res.get("number_card")
            User_balanse = res.get("balanse")
            id = User_id_chat
        bot.send_message(id, f"<b>‚ùå–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ä–∞–∑–º–µ—Ä–µ</b> {User_balanse} –†—É–± –æ—Ç–∫–ª—é—á–µ–Ω–∞\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –ø–æ –∫–Ω–æ–ø–∫–µ 'üç∞–ü–æ–¥–¥–µ—Ä–∂–∫–∞' —á—Ç–æ –±—ã –≤—ã—Å–Ω–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É", parse_mode="HTML")    
    
    if call.data == "pay_pay":
        bot.send_message(call.message.chat.id, "–¢–£–¢ –î–û–õ–ñ–ù–û –ë–´–¢–¨ –°–°–´–õ–ö–ê –ù–ê –†–ï–ö–í–ò–ó–ò–¢–´")
    if call.data == "add_balanse":
        add_balanse.add_balanse_call(call.message)
    if call.data == "add_balanse_admin":
        admins.process_balanse_amount(call.message)
    if call.data == "Support":
        help.Help_menu(call.message)
    if call.data == "Sapport_button":
        help.Complited(call.message)
    if call.data == "Exit_Chat_Button":
        bot.send_message(call.message.chat.id, text = "–í–∞—à–∞ —Ä–æ–∑–º–æ–≤–∞ –∑–∞–∫—Ä–∏—Ç–∞!")




    if call.data == "Subscriptions":
        Sub.Sub(call.message)
    if call.data == "Create_Sub":
        Sub.Create(call.message)
    if call.data == "Channel":
        Sub.Channel(call.message)

    if call.data == "Author":
        author.Author(call.message)

    if call.data == "test":
        channel.Channel_main(call.message)
    if call.data == "Message":
        message_class.Message(call.message)

    if call.data == "New_Persone":
        message_class.new_persone_status = "–í–∏–∫–ª."
        message_class.Update_Persone(call.message)
    if call.data == "Exit_New_Persone":
        message_class.Message(call.message)
    if call.data == "New_commment":
        message_class.new_commentar_status = "–í–∏–∫–ª."
        message_class.Unpdate_Commnets(call.message)
    if call.data == "Report":
        message_class.new_report_status = "–í–∏–∫–ª."
        message_class.Update_Report(call.message)
    if call.data == "Stop":
        stop.Stop_def(call.message)
    if call.data == "Stop_btn":
        stop.status = '–í–∏–∫–ª.'
        stop.Update_Stop_On(call.message)
    if call.data == "On":
        stop.status = "–í–∫–ª."
        stop.Stop_def(call.message)        
    if call.data == "Strict_Controle":
        strict.Strict_def(call.message)
    if call.data == "On_btn":
        strict.status = "–í–∫–ª"
        strict.Update_Button(call.message)
    if call.data == "On_stri":
        strict.status = "–í–∏–∫–ª"
        strict.Strict_def(call.message)
    if call.data == "Edit_money":
        channel.Price(call.message)
    if call.data == "Edit_WhileList":
        W_list.While_List_Menu(call.message)



@bot.message_handler(commands=['admin'])
def admin(message):
    admins.admin(message)

bot.polling(non_stop=True)