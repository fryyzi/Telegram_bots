import telebot
from telebot import types

from cogs.Approve.Approve import Approve

approve = Approve()

class Channel():
    def __init__(self, bot = None, channel_name = "", price = 0):
        self.bot = bot
        self.channel_name = channel_name
        self.price = price

    def Channel_main(self, message):
        markup = types.InlineKeyboardMarkup()
        Message = types.InlineKeyboardButton(text = "‚öôÔ∏è–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", callback_data = "Message")
        Stop = types.InlineKeyboardButton(text = "‚ùó–°—Ç–æ–ø", callback_data = "Stop")
        Strict_Controle = types.InlineKeyboardButton(text = "üîê–°—Ç—Ä–æ–≥–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å", callback_data = "Strict_Controle")
        Edit_money = types.InlineKeyboardButton(text = "‚úèÔ∏è–ó–º—ñ–Ω–∏—Ç–∏ —Ü—ñ–Ω—É", callback_data = "Edit_money")
        Edit_WhileList = types.InlineKeyboardButton(text = "üìÉ–†–µ–¥–∏–∞–∫—Ç—ñ—Ä–æ–≤–∞—Ç—å WhileList", callback_data = "Edit_WhileList")
        Invite_Persone = types.InlineKeyboardButton(text = "‚ûï–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–∏ –ø–æ–¥–ø—ñ—â–∏–∫–∞", callback_data = "Invite_Persone")
        Actual_Sub = types.InlineKeyboardButton(text = "‚öïÔ∏è–ê–∫—Ç—É–∞–ª—å–Ω—ñ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∏", callback_data = "Actual_Sub")
        Delete_channnel = types.InlineKeyboardButton(text = "‚ûñ–í–∏–¥–∞–ª–∏—Ç–∏", callback_data = "Delete_channnel")

        markup.row(Message)
        markup.row(Stop)
        markup.row(Strict_Controle)
        markup.row(Edit_money)
        markup.row(Edit_WhileList)
        markup.row(Invite_Persone)
        markup.row(Actual_Sub)
        markup.row(Delete_channnel)
        self.bot.send_message(message.chat.id, f"<b>–ù–∞–∑–≤–∞</b>: {approve.channel}\n<b>–°—Ç–∞—Ç—É—Ç—Å</b>: –†–∞–±–æ—Ç–∞—î\n<b>\n<b>–¶—ñ–Ω–∞: {self.price}\n</b>–ü–æ–¥–ø—ñ—â–∏–∫–æ–≤ –Ω–∞ –∫–∞–Ω–∞–ª—ñ</b>: 3\n<b>–°—Ç—Ä–æ–≥—ñ–π –∫–æ–Ω—Ç—Ä–æ–ª—å </b>: –í–∫–ª—é—á–µ–Ω–∏–π\n<b>WheliLIst</b>: 3\n<b>–ü–ª–∞—Ç—è—Ç—å</b>: 997", reply_markup=markup, parse_mode="HTML")


    def handle_Price(self, message):
        self.bot.register_next_step_handler(message, self.Price)

    def Price(self, message):
        self.bot.send_message(message.chat.id, f"<b>–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–º–∞:</b> 500 –≥—Ä–Ω\n–í–≤–µ–¥—ñ—Ç—å —Ü–µ–Ω—É –∑–∞ 1 –º—ñ—Å—è—Ü –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤–∞—à —á–∞—Ç(–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏)\n\n–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ —â–æ–± –ø—ñ–¥–ø–∏—Å–∫–∞ –±—É–ª–∞ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ <b>–≤–∫–∞–∂—ñ—Ç—å</b> - 0", parse_mode = "HTML")
        self.bot.register_next_step_handler(message, self.Price_Update) 

    def Price_Update(self, message):
        try:
            Price = int(message.text)
            if Price < 500:
                self.bot.send_message(message.chat.id, "<b>‚ùå–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–º–∞:</b> 500 –≥—Ä–Ω\n<b>–°–ø—Ä–æ–±—É–π—Ç–µ –≤–µ—Å—Ç–∏ –∑–Ω–æ–≤—É!:</b>", parse_mode = "HTML")
                self.bot.register_next_step_handler(message, self.Price_Update)
            else:
                self.price = Price
                self.bot.send_message(message.chat.id, "<b>‚úèÔ∏è‚úîÔ∏è–°—É–º–º–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞</b>", parse_mode = 'HTML')
        except:
            self.bot.send_message(message.chat.id, "‚ùå–°—É–º–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –¥—ñ–ª—å–∫–∏ –∑ —Ü–∏—Ñ—Ä.<b>–°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É:</b>", parse_mode = "HTML")
            self.bot.register_next_step_handler(message, self.Price_Update)
